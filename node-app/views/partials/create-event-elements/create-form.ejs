<style>
  /* Main container style */
  .form-container {
    width: 600px;
    height: 600px;
    background: linear-gradient(#ffffff, #ffffff) padding-box,
      linear-gradient(145deg, transparent 15%, #00eeff, #00ff0d, #fff700) border-box;
    border: 3px solid transparent;
    padding: 32px 24px;
    font-size: 14px;
    font-family: inherit;
    color: black;
    display: flex;
    flex-direction: column;
    gap: 0px;
    box-sizing: border-box;
    border-radius: 16px;
    background-size: 200% 100%;
    animation: gradient 2s ease infinite;
  }


  .form-container {
    width: 100%;
    max-width: 600px;
    /* Center form on the page */
  }



  @keyframes gradient {
    0% {
      background-position: 0% 10%;
    }

    50% {
      background-position: 100% 50%;
    }

    100% {
      background-position: 0% 10%;
    }
  }

  /* Form styles */
  .form-container .form {
    display: flex;
    flex-direction: column;
    gap: 20px;
  }

  .form-container .form-group {
    display: flex;
    flex-direction: column;
    gap: 2px;
  }




  .form-container .form-group label {
    color: #717171;
    font-weight: 600;
    font-size: 12px;
  }

  /* Shared styles for input, select, and textarea */
  .form-container .form-group input,
  .form-container .form-group select,
  .form-container .form-group textarea,
  .form-container .form-group date {
    width: 100%;
    padding: 12px 16px;
    /* Ensure padding is identical */
    font-size: 14px;
    /* Match font size */
    line-height: 1.5;
    /* Consistent line height */
    border-radius: 8px;
    color: #000000;
    font-family: inherit;
    background-color: transparent;
    border: 1px solid #414141;
    outline: none;
    box-sizing: border-box;
    /* Ensure consistent sizing */
  }

  .form-container .form-group input[type="checkbox"] {
    appearance: auto;
    /* Ensure default checkbox appearance */
    width: auto;
    /* Override width set for other inputs */
    height: auto;
    /* Override height set for other inputs */
    margin: 0;
    /* Reset margin if it's pushing the checkbox out */
    accent-color: #1cff37;
    /* Optional: Add color styling for modern browsers */
  }

  /* Placeholder styling */
  .form-container .form-group input::placeholder {
    opacity: 0.5;
  }

  /* Focus states */
  .form-container .form-group input:focus,
  .form-container .form-group select:focus,
  .form-container .form-group textarea:focus {
    border-color: #1cff37;
  }

  /* Select dropdown specific styling */
  .form-container .form-group select {
    appearance: none;
    /* Removes default arrow in some browsers */
    background: transparent;
    background-image: url('data:image/svg+xml;base64,...');
    /* Optional custom arrow icon */
    background-repeat: no-repeat;
    background-position: right 10px center;
    background-size: 12px;
  }

  /* Button styling */
  .form-container .form-submit-btn {
    width: 40%;
    color: #717171;
    font-weight: 600;
    background: #313131;
    border: 1px solid #414141;
    padding: 12px 16px;
    font-size: inherit;
    cursor: pointer;
    border-radius: 6px;
    margin-top: 8px;
    align-self: ;
  }

  .form-container .form-submit-btn:hover {
    background-color: #fff;
    border-color: #fff;
  }

  input:disabled {
    background-color: #f5f5f5;
    border-color: #dcdcdc;
    cursor: not-allowed;
    color: #a9a9a9;
  }

  
  
/* Targeting only the event card's form-container */
.event-card-1.form-container {
  max-height: 300px; /* Set your desired height here */
  /* Add any additional custom styles if needed */
}

</style>

<!-- File Upload -->
<style>
  /* Updated for Image Preview */
  #imagePreview {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: rgba(255, 255, 255, 1);
    background-size: cover;
    background-position: center;
    border-radius: 10px;
    overflow: hidden;
    position: relative;
  }

  #imagePreview img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 10px;
  }

  .custum-file-upload {
    height: 200px;
    width: full;
    display: flex;
    flex-direction: column;
    align-items: space-between;
    gap: 2px;
    cursor: pointer;
    align-items: center;
    justify-content: center;
    border: 2px dashed #cacaca;
    background-color: rgba(255, 255, 255, 1);
    padding: 1.5rem;
    border-radius: 10px;
    box-shadow: 0px 48px 35px -48px rgba(0, 0, 0, 0.1);
  }

  .custum-file-upload .icon {
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .custum-file-upload .icon svg {
    height: 80px;
    fill: rgba(75, 85, 99, 1);
  }

  .custum-file-upload .text {
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .custum-file-upload .text span {
    font-weight: 400;
    color: rgba(75, 85, 99, 1);
  }

  .custum-file-upload input {
    display: none;
  }
</style>

<div class="flex flex-col items-center align-middle mt-4">

  <h1 class="font-mono">Create your event with us!</h1>
  <h2 class="font-thin mb-0">Fill in the form below to get started...</h2>

</div>

<div id="" class="m-0 p-4 flex flex-row-reverse ">

  <!-- Card Preview-->
  <div class="w-full flex flex-col items-start justify-center ">

    <!-- Event Card -->
    <div class="event-card-1 bg-white w-full rounded-lg border shadow-xl form-container">
       
      <!-- Bubles -->  
      <div class="flex px-1 gap-1">
        <div class="circle">
          <span class="bg-blue-500 inline-block center w-3 h-3 rounded-full"></span>
        </div>
        <div class="circle">
          <span class="bg-purple-500 inline-block center w-3 h-3 rounded-full"></span>
        </div>
        <div class="circle">
          <span class="bg-pink-500 box inline-block center w-3 h-3 rounded-full"></span>
        </div>
      </div>

      <!-- Event Card Content -->
      <div class="w-full  grid grid-cols-2 grid-rows-3 ">

        <div id="EventName" class=" col-span-1 row-span-1 px-1">
          <h1 id="previewEventName" class="text-2xl">Event Name....</h1>
          <p class="font-semibold">Type: <span class="font-normal" id="previewTypeOfEvent"></span></p>
          <p class="font-semibold">Date: <span class="font-normal" id="previewBeginDate"></span> ~ <span class="font-normal" id="previewEndDate"></span></p>
          <p class="font-semibold">Province: <span class="font-normal" id="previewProvince"></span></p>
          <!-- <p class="font-semibold">Guests: <span class="font-normal" id="previewGuests"></span></p> -->
          <!-- <p class="font-semibold">Private Event: <span class="font-normal" id="previewPrivateEvent"></span></p> -->
          <p class="font-semibold">Ticket Price: <span class="font-normal">$<span class="font-normal"
                id="previewTicketPrice"></span></span> </p>
          <p class="font-semibold">Description: <span class="font-normal" id="previewDescription"></span></p>
        </div>

        <div id="eventImage" class="col-span-1 row-span-1 relative">
          <label class="custum-file-upload" for="file">
            <div id="imagePreview">
              <div id="icon" class="icon">
                <svg xmlns="http://www.w3.org/2000/svg" fill="" viewBox="0 0 24 24">
                  <g stroke-width="0" id="SVGRepo_bgCarrier"></g>
                  <g stroke-linejoin="round" stroke-linecap="round" id="SVGRepo_tracerCarrier"></g>
                  <g id="SVGRepo_iconCarrier">
                    <path fill=""
                      d="M10 1C9.73478 1 9.48043 1.10536 9.29289 1.29289L3.29289 7.29289C3.10536 7.48043 3 7.73478 3 8V20C3 21.6569 4.34315 23 6 23H7C7.55228 23 8 22.5523 8 22C8 21.4477 7.55228 21 7 21H6C5.44772 21 5 20.5523 5 20V9H10C10.5523 9 11 8.55228 11 8V3H18C18.5523 3 19 3.44772 19 4V9C19 9.55228 19.4477 10 20 10C20.5523 10 21 9.55228 21 9V4C21 2.34315 19.6569 1 18 1H10ZM9 7H6.41421L9 4.41421V7ZM14 15.5C14 14.1193 15.1193 13 16.5 13C17.8807 13 19 14.1193 19 15.5V16V17H20C21.1046 17 22 17.8954 22 19C22 20.1046 21.1046 21 20 21H13C11.8954 21 11 20.1046 11 19C11 17.8954 11.8954 17 13 17H14V16V15.5ZM16.5 11C14.142 11 12.2076 12.8136 12.0156 15.122C10.2825 15.5606 9 17.1305 9 19C9 21.2091 10.7909 23 13 23H20C22.2091 23 24 21.2091 24 19C24 17.1305 22.7175 15.5606 20.9844 15.122C20.7924 12.8136 18.858 11 16.5 11Z"
                      clip-rule="evenodd" fill-rule="evenodd"></path>
                  </g>
                </svg>
              </div>
            </div>
            <div class="text">
              <span>Click to upload image</span>
            </div>
            <input type="file" id="file" accept="image/*">
          </label>
        </div>


      </div>

      <div>

      </div>
    </div>
  </div>

  <!-- Loader Image -->
  <script>
    document.getElementById("file").addEventListener("change", function (event) {
      const file = event.target.files[0];

      if (file) {
        const reader = new FileReader();

        reader.onload = function (e) {
          const imagePreview = document.getElementById("imagePreview");
          imagePreview.style.backgroundImage = `url(${e.target.result})`;
          imagePreview.innerHTML = ""; // Remove the icon and text
        };

        reader.readAsDataURL(file); // Read the uploaded file as a Data URL
      }
    });

  </script>

  <!-- Form -->
  <div class="w-full flex flex-col items-center justify-center m-0">

    <div class="form-container shadow-2xl shadow-black m-0">
      <!--Form -->
      <form class="form m-0" id="create-event-form">

        <!-- Form Container  -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">

          <!-- Event Name  -->
          <div class="col-span-1 form-group">
            <label for="event-name">Event Name</label>
            <input required="" name="email" id="event-name" type="text" placeholder="Provide a name">
          </div>

          <!--Event type-->
          <div class="col-span-2 form-group">
            <label for="event-type">Type of Event</label>
            <select id="event-type" name="Type-of-Event">
              <option value="" disabled selected>Select a type of event</option>
              <option value="Corporate Events">Corporate Events</option>
              <option value="Convention">Convention</option>
              <option value="Fundraisers">Fundraisers</option>
              <option value="Parties">Parties</option>
              <option value="Seminars">Seminars</option>
              <option value="Weddings">Weddings</option>
            </select>
          </div>

          <!--Begin Date-->
          <div class="form-group col-span-1">
            <label for="event-date">Begin Date</label>
            <input required name="event-date" id="start-date" type="date">
          </div>

          <!-- End Date -->
          <div class="form-group col-span-1">
            <label for="event-date">End Date</label>
            <input required name="event-date" id="end-date" type="date">
          </div>

            <!-- Budget -->
            <div id="budget-container" class="form-group col-span-1">
            <label for="budget">Budget of Event (CAD)</label>
            <input id="budget" type="number" name="Budget" min="1000" placeholder="Enter your budget">
            </div>

          <!-- Province -->
          <div id="province-container" class="form-group col-span-2">
            <label for="province">Select Province</label>
            <select id="province" name="Province">
              <option value="" disabled selected>Select a province</option>
              <option value="Alberta">Alberta</option>
              <option value="British Columbia">British Columbia</option>
              <option value="Manitoba">Manitoba</option>
              <option value="New Brunswick">New Brunswick</option>
              <option value="Newfoundland and Labrador">Newfoundland and Labrador</option>
              <option value="Nova Scotia">Nova Scotia</option>
              <option value="Ontario">Ontario</option>
              <option value="Prince Edward Island">Prince Edward Island</option>
              <option value="Quebec">Quebec</option>
              <option value="Saskatchewan">Saskatchewan</option>
              <option value="Yukon">Yukon</option>
              <option value="Northwest Territories">Northwest Territories</option>
              <option value="Nunavut">Nunavut</option>
            </select>
          </div>

          <!-- Number of Guests -->
          <div id="guests-container" class="form-group col-span-1">
            <label for="guests">Number of Guests</label>
            <select id='number-guests' name=" Number-of-Guests">
              <option value="" disabled selected>Select capacity</option>
              <option value="10">1-10 Guests</option>
              <option value="20">11-20 Guests</option>
              <option value="30">21-30 Guests</option>
              <option value="40">31-40 Guests</option>
              <option value="50">50+ Guests</option>
              </select>
          </div>

          <!-- Indoor/Outdoors -->
          <div id="indoor-outdoorr" class="form-group col-span-1">
            <label for="indoor-outdoor">Indoor/Outdoors</label>
            <select id='indoor-outdoor' name=" indoor-outdoor">
              <option value="" disabled selected>Select capacity</option>
              <option value="Indoor">Indoor</option>
              <option value="Outdoor">Outdoor</option>
              </select>
          </div>

          <!-- Ticket Price -->
          <div id="budget-container" class="form-group col-span-1">
            <label for="budget">Ticket Price (CAD)</label>
            <input id="venue-price" type="number" name="Budget" min="0" placeholder="Enter your price">
          </div>

          <!-- Public or Private -->
          <div class="form-group form-group-checkbox  justify-end">
            <label for="public-private" style="display: flex; align-items: center;">
              <input type="checkbox" id="public-private" style="margin-right: 5px;">
              Private Event?
            </label>
          </div>


          <!-- Event Description -->
          <div class="form-group col-span-3 row-span-1">
            <label for="textarea">Event Description</label>
            <textarea cols="50" rows="3" id="description" name="textarea"
              placeholder="Provide an optional description"></textarea>
          </div>

          <!-- Submit Button -->
          <div class="row-span-1 col-span-3 flex flex-row justify-center">
            <button type="submit" id="submit-button" class="form-submit-btn">Submit</button>
          </div>


        </div>

      </form>
    </div>

    </form>
  </div>

</div>

</div>



<!-- Fill the Card -->
<script>
  document.getElementById('event-name').addEventListener('input', (event) => {
    document.getElementById('previewEventName').textContent = event.target.value || 'Event Name...';
  });

  document.getElementById('event-type').addEventListener('change', (event) => {
    document.getElementById('previewTypeOfEvent').textContent = event.target.value || 'Type of event...';
  });

  document.getElementById('province').addEventListener('input', (event) => {
    document.getElementById('previewProvince').textContent = event.target.value || 'Province...';
  });

  document.getElementById('start-date').addEventListener('change', (event) => {
    document.getElementById('previewBeginDate').textContent = event.target.value || 'Date...';
  });

  document.getElementById('end-date').addEventListener('change', (event) => {
    document.getElementById('previewEndDate').textContent = event.target.value || 'Date...';
  });

  // document.getElementById('budget').addEventListener('input', (event) => {
  //   document.getElementById('previewBudget').textContent = event.target.value || 'Budget...';
  // });

  // document.getElementById('guests').addEventListener('input', (event) => {
  //   document.getElementById('previewGuests').textContent = event.target.value || 'Guests...';
  // });

  // document.getElementById('public-private').addEventListener('change', (event) => {
  //   document.getElementById('previewPrivateEvent').textContent = event.target.checked ? 'Yes' : 'No';
  // });

  document.getElementById('venue-price').addEventListener('input', (event) => {
    document.getElementById('previewTicketPrice').textContent = event.target.value || 'Ticket Price...';
  });

  document.getElementById('description').addEventListener('input', (event) => {
    document.getElementById('previewDescription').textContent = event.target.value || 'Description...';
  });

</script>

<!-- Start and End Date Logic -->
<script>
  // Get references to the input fields
  const startDateInput = document.getElementById("start-date");
  const endDateInput = document.getElementById("end-date");

  // Function to format date to YYYY-MM-DD
  function formatDate(date) {
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are 0-based
    const day = String(date.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
  }

  // Set minimum value for start-date as today's date
  const today = new Date();
  startDateInput.min = formatDate(today);
  endDateInput.min = formatDate(today);

  // Update the minimum value of end-date based on start-date
  startDateInput.addEventListener("change", () => {
    const startDateValue = new Date(startDateInput.value);
    if (!isNaN(startDateValue)) {
      // Set end-date's minimum value to one day after start-date
      const minEndDate = new Date(startDateValue);
      minEndDate.setDate(minEndDate.getDate() + 1);
      endDateInput.min = formatDate(minEndDate);

      // Optionally clear end-date if it violates the new min value
      if (endDateInput.value && new Date(endDateInput.value) < minEndDate) {
        endDateInput.value = "";
      }
    }
  });

</script>

<!-- Public/Ticket Logic -->
<script>
  // Get references to the checkbox and venue price input
  const publicPrivateCheckbox = document.getElementById("public-private");
  const venuePriceInput = document.getElementById("venue-price");

  // Add an event listener to the checkbox
  publicPrivateCheckbox.addEventListener("change", () => {
    if (publicPrivateCheckbox.checked) {
      // If checked (public event), disable venue price
      venuePriceInput.disabled = true;
      venuePriceInput.value = ""; // Clear any previously entered value
    } else {
      // If unchecked (private event), enable venue price
      venuePriceInput.disabled = false;
    }
  });

</script>

<!-- Send Data -->
<script>
  document.getElementById('create-event-form').addEventListener('submit', async function (event) {
    event.preventDefault();

    // Get form values
    const event_name = document.getElementById('event-name').value;
    const event_type = document.getElementById('event-type').value;
    const guests = parseInt(document.getElementById('number-guests').value);
    const start_date = document.getElementById('start-date').value;
    const end_date = document.getElementById('end-date').value;
    const province = document.getElementById('province').value;
    const budget = parseInt(document.getElementById('budget').value);
    const description = document.getElementById('description').value;
    const venue_price = parseInt(document.getElementById('venue-price').value);
    const public = document.getElementById('public-private').checked;
    const indoor_outdoor = document.getElementById('indoor-outdoor').value;

    // Validate inputs
    if (!event_name || !event_type || !guests || !start_date || !end_date || !province || !budget) {
      alert("Please fill out all fields.");
      return;
    }

    // Prepare the data to send
    const data = {event_name, event_type, guests, start_date, end_date, province, budget, description, venue_price, public, indoor_outdoor};
    console.log(data);

    try {
      // Show loader overlay
      const loader = document.getElementById("loader");
      loader.classList.remove("hidden");

      // Send the data to the Flask API
      const response = await fetch('http://127.0.0.1:5000/spea-2', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
      });

      if (response.ok) {


        // Parse the response (an array of venues)
        const venues = await response.json();
        console.log(venues);

        // Store the data in sessionStorage for the next page
        sessionStorage.setItem('venues', JSON.stringify(venues));


        // Store the province in sessionStorage for the next page
        sessionStorage.setItem('province', province);
        sessionStorage.setItem('budget', budget);

        // Redirect to the recommendation page
        window.location.href = `/main-web-page/recomendation-page1`;

      } else {
        const error = await response.json();
        alert('Error: ' + error.message);
      }
    } catch (error) {
      console.error('Error:', error);
      alert('Something went wrong!');
    }
  });


</script>