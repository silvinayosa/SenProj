<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CO2 Emissions Data Analysis in Canada</title>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>

    <!--Timeline CSS -->
    <link href="../css/timeline.css" rel="stylesheet" type="text/css">

    <!--D3 -->
    <script src="https://d3js.org/d3.v7.min.js"></script>


    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">

    <!--Chart.js CDN-->
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.6/dist/chart.umd.min.js"></script>

    <!--Mapbox CDN-->
    <link href='https://api.mapbox.com/mapbox-gl-js/v2.6.1/mapbox-gl.css' rel='stylesheet' />
    <script src='https://api.mapbox.com/mapbox-gl-js/v2.6.1/mapbox-gl.js'></script>
    <script src='https://unpkg.com/deck.gl@latest/dist.min.js'></script>

    <!--deck.gl CDN-->
    <script src="https://unpkg.com/deck.gl@^9.0.0/dist.min.js"></script>
    <script src="https://unpkg.com/@deck.gl/layers@latest/dist.min.js"></script>

    <!--Tailwind CDN-->
    <script src="https://cdn.tailwindcss.com"></script>

    <style>
        #map {
            width: 100%;
            height: 400px;
        }
    </style>

    <style>
        /* Fade-out animation */
        @keyframes fadeOut {
            from {
                opacity: 1;
            }

            to {
                opacity: 0;
            }
        }

        .fade-out {
            animation: fadeOut 2s ease forwards;
        }

        /* Blur effect on overlay */
        .blurred-background {
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            /* For Safari */
        }
    </style>

</head>

<body>
    <style>
        .bg {
            background-color: #d4ebc2;
        }

        .card {
            background-color: #c3daaf;
        }
    </style>

    <!-- Spinner overlay with blur effect, initially visible -->
    <div id="spinner"
        class="fixed inset-0 flex items-center justify-center bg-gray-800 bg-opacity-50 blurred-background z-50">
        <div class="w-16 h-16 border-4 border-t-blue-500 border-blue-200 rounded-full animate-spin"></div>
    </div>

    <!-- Spinner JS -->
    <script>
        // Wait until the page content fully loads
        window.addEventListener("load", () => {
            const spinner = document.getElementById("spinner");
            // Delay before starting fade-out (e.g., 500ms delay)
            setTimeout(() => {
                // Apply fade-out effect to the spinner
                spinner.classList.add("fade-out");

                // Remove spinner from the DOM after fade-out is complete
                setTimeout(() => {
                    spinner.style.display = "none";
                }, 1000); // Match this delay to the fade-out duration (1s)
            }, 1000); // Initial delay before fading out spinner (500ms)
        });
        document.body.removeChild('spinner');
    </script>

    <!-- Navbar -->
    <%- include('../partials/loggedInNavbar') %>


        <!-- Containers for Components -->
        <div class="bg-gray-100 p-8 ">

            <!-- Title  -->
            <h1 class="text-3xl font-bold mb-1 px-4 text-center">CO2 Emissions Data Analysis in Canada</h1>

            <div class="flex p-4">
                <div class="flex-1 flex flex-col">
                    <!-- Monthly Slider -->
                    <div class="month-slider border bg-white w-[100%] h-[100%] bg-opacity-90 px-1 rounded-lg shadow-lg">
                        <input type="range" min="1" max="5" value="1" id="selectedMonth" class="slider">
                        <div class="month-labels">
                            <span>Nov '22</span>
                            <span>Dec '22</span>
                            <span>Jan '23</span>
                            <span>Feb '23</span>
                            <span>Mar '23</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Grid -->
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">

                <!-- Mapbox Container -->
                <div class="col-span-1 p-4 border rounded-xl shadow bg-white relative">

                    <h2 class="text-xl font-semibold mb-2">Map</h2>

                    <div id="map"></div>

                    <!--Legend-->
                    <div id="legend"
                        class="absolute top-14 right-6 bg-white bg-opacity-90 px-1 rounded-lg shadow-lg text-xs">
                        <div class="flex items-center mb-1-1">
                            <div class="w-3 h-3 mr-2 rounded-full" style="background-color: #00FF00;"></div>
                            < 418.47 </div>
                                <div class="flex items-center mb-1">
                                    <div class="w-3 h-3 mr-2 rounded-full" style="background-color: #FFFF00;"></div>
                                    418.47 ~ 421.95
                                </div>
                                <div class="flex items-center mb-1">
                                    <div class="w-3 h-3 mr-2 rounded-full" style="background-color: #FF0000;"></div> >
                                    421.95
                                </div>
                        </div>
                    </div>

                    <!-- Mapbox Icon Container -->
                    <div class="col-span-2 p-4 border rounded-xl shadow bg-white relative border-black">
                        <h2 class="text-xl font-semibold mb-2">Venues Map</h2>
                        <div id="heat-map" class="relative w-[100%] h-[400px]"></div>
                        <div id="displayMonth"></div>
                    </div>

                    <!-- Line Chart -->
                    <div class="col-span-2 row-span-1 p-4 border rounded-xl shadow bg-white">
                        <h2 class="text-xl font-semibold mb-2">Line Chart</h2>
                        <canvas id="lineChart"></canvas>
                    </div>

                    <!-- </div> -->
                    <div class="col-span-1 row-span-2 p-0 relative flex-col flex gap-4">

                        <!-- Bar Chart -->
                        <div class="col-span-1  row-span-1 p-4 border rounded-xl shadow bg-white">
                            <h2 class="text-xl font-semibold mb-2">Bar Chart</h2>
                            <canvas id="barChart" class="max-h-44"></canvas>
                        </div>

                        <!-- Pie Chart -->
                        <div class="col-span-1 p-4 border rounded-xl shadow bg-white">
                            <h2 class="text-xl font-semibold mb-2">Pie Chart</h2>
                            <canvas id="pieChart" class="max-h-44"></canvas>
                        </div>
                    </div>

                    <!-- Prediction Button -->
                    <div class="col-span-3 row-span-2 p-4 mb-10 flex  ">

                        <a href="/main-web-page/prediction"
                            class="absolute group border-none bg-transparent p-0 outline-none cursor-pointer  font-semibold  uppercase text-base w-[90%]">
                            <span
                                class="absolute top-0 left-0 w-[50%] h-[] bg-black bg-opacity-25 rounded-lg transform translate-y-0.5 transition duration-[600ms] ease-[cubic-bezier(0.3,0.7,0.4,1)] group-hover:translate-y-1 group-hover:duration-[250ms] group-active:translate-y-px"></span>

                            <span
                                class="absolute top-0 left-0 w-full h-full rounded-lg bg-gradient-to-l from-[hsl(217,33%,16%)] via-[hsl(217,33%,32%)] to-[hsl(217,33%,16%)]"></span>

                            <div class="relative flex items-center justify-between py-3 px-6 text-lg text-white rounded-lg transform -translate-y-1 bg-gradient-to-r from-[#2196f3] via-[#1976d2] to-[#0d47a1] gap-3 transition duration-[600ms] ease-[cubic-bezier(0.3,0.7,0.4,1)] group-hover:-translate-y-1.5 group-hover:duration-[250ms] group-active:-translate-y-0.5 brightness-100 group-hover:brightness-110"
                                <span class="select-none">Start Prediction...</span>

                                <svg viewBox="0 0 20 20" fill="currentColor"
                                    class="w-5 h-5 ml-2 -mr-1 transition duration-250 group-hover:translate-x-1">
                                    <path clip-rule="evenodd"
                                        d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z"
                                        fill-rule="evenodd"></path>
                                </svg>
                            </div>
                        </a>

                    </div>
                </div>
            </div>
        </div>

        <!-- Maps and Graphs Components -->
        <script type="module">

            // Import from CDN
            const { DeckGL, GeoJsonLayer, TextLayer, IconLayer } = deck;

            // Bar Chart
            const ctxBar = document.getElementById('barChart').getContext('2d');
            let BarChart = new Chart(ctxBar, {
                type: 'bar',
                data: {
                    labels: ['> 421.95', '418.47 ~ 421.95', '< 418.47'],
                    datasets: [{
                        title: 'CO2 Emissions',
                        data: [200, 421, 122],
                        backgroundColor: [
                            'rgba(255, 99, 132, 0.6)',
                            'rgba(255, 206, 86, 0.6)',
                            'rgba(75, 192, 192, 0.6)',
                        ],

                    }]
                },
                options: {
                    plugins: {
                        title: {
                            display: true,
                            text: 'Distribution of Venues by CO2 Emission Categories'
                        },
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });

            // Line Chart
            const ctxLine = document.getElementById('lineChart').getContext('2d');
            let LineChart = new Chart(ctxLine, {
                type: 'line',
                data: {
                    labels: ['2022-11-27', '2022-11-28', '2022-11-29', '2022-11-30'],
                    datasets: [{
                        label: `CO2 Emissions in Ontario January`,
                        data: [420.3958621886444, 420.4252628448956, 420.45403967765446, 420.4821731977754],
                        borderColor: 'rgba(153, 102, 255, 1)',
                        borderWidth: 2,
                        fill: false,
                    }]
                },
                options: {
                    // Optional: Add chart options here
                }
            });

            // Pie Chart
            const ctxPie = document.getElementById('pieChart').getContext('2d');
            let pieChart = new Chart(ctxPie, {
                type: 'pie',
                data: {
                    labels: ['> 421.95', '418.47 ~ 421.95', '< 418.47'],
                    datasets: [{
                        //label: `CO2 Emissions in `,
                        data: [200, 421, 122],
                        backgroundColor: [
                            'rgba(255, 99, 132, 0.6)',
                            'rgba(255, 206, 86, 0.6)',
                            'rgba(75, 192, 192, 0.6)',
                        ],
                    }]
                },
                options: {
                    plugins: {
                        title: {
                            display: false,
                            //text: 'Distribution of Venues by CO2 Emission Categories'
                        },
                        legend: {
                            display: true
                        }
                    },
                }
            });

            // Function to save last province clicked
            let lastProvince = 'Ontario';
            let lastmonth = 'November';

            // Function to handle clicks on provinces in the map
            function onProvinceClick(province) {

                // Check if the clicked province is different from the last province clicked
                if (province !== lastProvince) {
                    // Update the last province clicked
                    lastProvince = province;

                    // Map the province name to their postal abbreviation
                    const provinceMap = {
                        'Ontario': 'ON',
                        'Quebec': 'QC',
                        'Alberta': 'AB',
                        'British Columbia': 'BC',
                        'Manitoba': 'MB',
                        'New Brunswick': 'NB',
                        'Newfoundland And Labrador': 'NL',
                        'Nova Scotia': 'NS',
                        'Prince EdwardIsland': 'PE',
                        'Saskatchewan': 'SK',
                        'Northwest Territories': 'NT',
                        'Nunavut': 'NU',
                        'Yukon': 'YT',
                    };

                    console.log(provinceMap[province]);

                    // load Map icon layer
                    fetch('/js/venues/' + provinceMap[province] + 'VenueList.csv')
                        .then(response => response.text())
                        .then(data => {

                            const rows = data.split('\n').map(row => row.split(','));
                            //console.log(row);

                            // Convert rows into an array of objects with appropriate keys
                            const parsedData = rows.slice(1).map(row => ({
                                Facility_Name: row[0],
                                ODRSF_facility_type: row[1],
                                Prov_Terr: row[2],
                                Latitude: parseFloat(row[3]),
                                Longitude: parseFloat(row[4]),
                                Date: row[5],
                                CO2: parseFloat(row[6])
                            }));



                            // Create a new 
                            const layer = new IconLayer({
                                id: 'IconLayer',
                                // mapboxApiAccessToken: 'pk.eyJ1IjoiYW5kZXJzb243MTY4IiwiYSI6ImNtMnczMmVnMDAybWIycHEzNzV2Yms4enMifQ.AinM6ZxkQD6k0iu_7cNSaA',
                                // mapStyle: 'mapbox://styles/mapbox/light-v9',
                                data: parsedData,
                                getColor: d => [255, 140, 0],
                                getIcon: d => 'marker',
                                getPosition: d => [d.Longitude, d.Latitude],
                                ///getPosition: d => d.geometry.coordinates[0],
                                getSize: 30,
                                iconAtlas: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/icon-atlas.png',
                                iconMapping: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/icon-atlas.json',
                                pickable: true
                            });

                            // Provinces initial view   
                            const provinceView = {
                                'Ontario': {
                                    longitude: -79.3832,
                                    latitude: 43.6532,
                                    zoom: 10
                                },
                                'Quebec': {
                                    longitude: -75.743112,
                                    latitude: 45.446652,
                                    zoom: 10
                                },
                                'Alberta': {
                                    longitude: -113.4909,
                                    latitude: 53.5444,
                                    zoom: 12
                                },
                                'British Columbia': {
                                    longitude: -122.8672968,
                                    latitude: 49.0292432,
                                    zoom: 12
                                },
                                'Manitoba': {
                                    longitude: -97.1384,
                                    latitude: 49.8951,
                                    zoom: 12
                                },
                                'New Brunswick': {
                                    longitude: -66.05220771,
                                    latitude: 45.27810357,
                                    zoom: 10
                                },
                                'Newfoundland And Labrador': {
                                    longitude: -55.0315,
                                    latitude: 53.1355,
                                    zoom: 6
                                },
                                'Nova Scotia': {
                                    longitude: -63.63425611,
                                    latitude: 44.56948006,
                                    zoom: 6
                                },
                                'Prince EdwardIsland': {
                                    longitude: -63.1286,
                                    latitude: 46.5107,
                                    zoom: 10
                                },
                                'Saskatchewan': {
                                    longitude: -106.70628,
                                    latitude: 52.14786324,
                                    zoom: 10
                                },
                                'Northwest Territories': {
                                    longitude: -114.3427929,
                                    latitude: 62.46753555,
                                    zoom: 10
                                },
                                'Nunavut': {
                                    longitude: -86.7677,
                                    latitude: 70.2998,
                                    zoom: 10
                                },
                                'Yukon': {
                                    longitude: -135.0668,
                                    latitude: 60.7212,
                                    zoom: 6
                                },
                            };

                            // Create a new DeckGL instance
                            let map2 = new DeckGL({
                                mapboxApiAccessToken: 'pk.eyJ1IjoiYW5kZXJzb243MTY4IiwiYSI6ImNtMnczMmVnMDAybWIycHEzNzV2Yms4enMifQ.AinM6ZxkQD6k0iu_7cNSaA',
                                mapStyle: 'mapbox://styles/mapbox/light-v9',
                                container: 'heat-map',
                                initialViewState: {
                                    longitude: provinceView[province].longitude,
                                    latitude: provinceView[province].latitude,
                                    zoom: provinceView[province].zoom,
                                    pitch: 60,

                                },
                                controller: true,
                                layers: [layer]
                            });
                        });


                    console.log("LAST MONTH:", lastmonth);

                    // Group by date and mean the co2 values
                    d3.csv('/js/data/' + provinceMap[province] + '_' + lastmonth + '.csv').then(function (data) {
                        const groupedData = d3.group(data, d => d.Date);
                        const meanData = Array.from(groupedData, ([key, value]) => {
                            const mean = d3.mean(value, d => d.CO2);
                            return { date: key, co2: mean };
                        });
                        console.log(meanData);

                        // Update the line chart data
                        LineChart.data.datasets[0].data = meanData.map(d => d.co2);

                        // Update Label name
                        LineChart.data.datasets[0].label = `CO2 Emissions in ${province} - ${lastmonth}`;

                        // Update the line chart labels
                        LineChart.data.labels = meanData.map(d => d.date);

                        LineChart.update();

                        console.log('success');
                    });

                    d3.csv('/js/data2/' + provinceMap[province] + '_' + lastmonth + '.csv').then(function (data) {

                        // Parse the data and filter out the CO2 values
                        const co2Data = data.map(d => d.CO2);

                        // Count the number of times each condition is met
                        let greenCount = 0;
                        let redCount = 0;
                        let yellowCount = 0;

                        co2Data.forEach(co2 => {
                            if (co2 < 418.47) {
                                greenCount++;
                            } else if (co2 > 421.95) {
                                redCount++;
                            } else {
                                yellowCount++;
                            }
                        });

                        // Store the counts in an array
                        const barChartData = [greenCount, yellowCount, redCount];

                        // Update the bar chart data
                        BarChart.data.datasets[0].data = barChartData;
                        BarChart.update();

                        // Update the pie chart data
                        pieChart.data.datasets[0].data = barChartData;
                        pieChart.update();

                    });


                }
            }

            // Fucntion on slider change For line chart
            document.getElementById('selectedMonth').addEventListener('input', function (event) {
                const month = event.target.value - 1;

                const provinceMap = {
                    'Ontario': 'ON',
                    'Quebec': 'QC',
                    'Alberta': 'AB',
                    'British Columbia': 'BC',
                    'Manitoba': 'MB',
                    'New Brunswick': 'NB',
                    'Newfoundland And Labrador': 'NL',
                    'Nova Scotia': 'NS',
                    'Prince EdwardIsland': 'PE',
                    'Saskatchewan': 'SK',
                    'Northwest Territories': 'NT',
                    'Nunavut': 'NU',
                    'Yukon': 'YT',
                };

                // Month mapping based on the slider value
                const months = ["November", "December", "January", "February", "March"];

                console.log(months[month]);

                lastmonth = months[month];

                console.log("Last Month", lastmonth);

                d3.csv('/js/data/' + provinceMap[lastProvince] + '_' + months[month] + '.csv').then(function (data) {
                    const groupedData = d3.group(data, d => d.Date);
                    const meanData = Array.from(groupedData, ([key, value]) => {
                        const mean = d3.mean(value, d => d.CO2);
                        return { date: key, co2: mean };
                    });
                    console.log(meanData.map(d => d.co2));

                    // Update the line chart data
                    LineChart.data.datasets[0].data = meanData.map(d => d.co2);

                    // Update Label name
                    LineChart.data.datasets[0].label = `CO2 Emissions in ${lastProvince} - ${months[month]}`;

                    // Update the line chart labels
                    LineChart.data.labels = meanData.map(d => d.date);

                    LineChart.update();

                    console.log('success');
                });
            });


            /* ==== Load the Map Chroropleth ====*/
            fetch('/js/hello.geojson')
                .then(response => response.json())
                .then(geojsonData => {

                    // Colors for the quantile scale
                    const colors = [
                        [90, 24, 70],   // #5A1846 - Dark purple for low CO2
                        [144, 12, 63],  // #900C3F - Deep burgundy for medium-low CO2
                        [199, 0, 57],   // #C70039 - Red for medium CO2
                        [227, 97, 28],  // #E3611C - Orange-red for medium-high CO2
                        [241, 146, 14], // #F1920E - Orange for high CO2
                        [255, 195, 0]   // #FFC300 - Yellow for very high CO2
                    ];

                    // Initial map setup
                    const colorScale = (co2) => {
                        if (co2 >= 1000) return [255, 0, 0, 150];
                        else if (co2 >= 500) return [255, 165, 0, 150];
                        else if (co2 >= 400) return [255, 255, 0, 150];
                        else if (co2 >= 200) return [144, 238, 144, 150];
                        return [128, 128, 128, 150];
                    };

                    //update heatmap
                    function updateHeatMap(province) {
                        console.log(province);

                        //update heatmap  data
                        map2.setProps({
                            layers: [
                                new HeatmapLayer({
                                    id: 'heatmap-layer',
                                    data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/sf-bike-parking.json',
                                    aggregation: 'SUM',
                                    getPosition: d => d.COORDINATES,
                                    getWeight: d => d.SPACES,
                                    radiusPixels: 25
                                })
                            ]
                        });

                        // Update the heatmap zoon
                        map2.setProps({
                            initialViewState: {
                                longitude: -122.4,
                                latitude: 37.74,
                                zoom: 4
                            }
                        });

                        console.log('Updated');
                    }

                    // Map Canada
                    const map = new DeckGL({
                        mapboxApiAccessToken: 'pk.eyJ1IjoiYW5kZXJzb243MTY4IiwiYSI6ImNtMnczMmVnMDAybWIycHEzNzV2Yms4enMifQ.AinM6ZxkQD6k0iu_7cNSaA',
                        mapStyle: 'mapbox://styles/mapbox/light-v9',
                        //: "MapView",
                        container: 'map',
                        initialViewState: {
                            longitude: -95.7129, //-95.7129,
                            latitude: 56.1304, //56.1304,
                            zoom: 1.8,
                            bearing: 0,

                        },
                        controller: true,
                        layers: [
                            new GeoJsonLayer({
                                id: 'geojsonData',
                                data: geojsonData,
                                filled: true,
                                onDataLoad: () => setLoading(false),
                                stroked: false,
                                getPointRadius: 4,
                                opacity: 0.5,
                                pickable: true,
                                autoHighlight: true,

                                getFillColor: (d) => {
                                    const co2 = d.properties.co2[1];
                                    if (co2 < 418.47) {
                                        return [0, 128, 0, 150]; // Green
                                    } else if (co2 > 421.95) {
                                        return [255, 0, 0, 150]; // Red
                                    } else {
                                        return [255, 255, 0, 150]; // Yellow
                                    }
                                },
                                onClick: (info, event) => {
                                    console.log('Clicked on:', info.object.properties.prov_name_en); // Log the clicked info
                                    onProvinceClick(info.object.properties.prov_name_en[0]);
                                }

                            }),

                            new TextLayer({
                                id: 'text-layer',
                                data: geojsonData.features,
                                getPosition: d => [d.properties.geo_point_2d.lon, d.properties.geo_point_2d.lat],
                                getText: d => d.properties.prov_name_en[0],
                                getSize: 12,
                                getColor: [0, 0, 0, 255],
                                getAngle: 0,
                                getTextAnchor: 'middle',
                                getAlignmentBaseline: 'center',
                                fontFamily: 'Arial, sans-serif'
                            })
                        ],

                    });

                });

            /* ==== Load the Map Icon ====*/
            fetch('/js/venues/onVenueList.csv')
                .then(response => response.text())
                .then(data => {

                    const rows = data.split('\n').map(row => row.split(','));

                    // Convert rows into an array of objects with appropriate keys
                    const parsedData = rows.slice(1).map(row => ({
                        Facility_Name: row[0],
                        ODRSF_facility_type: row[1],
                        Prov_Terr: row[2],
                        Latitude: parseFloat(row[3]),
                        Longitude: parseFloat(row[4]),
                        Date: row[5],
                        CO2: parseFloat(row[6])
                    }));

                    // Create a new 
                    const layer = new IconLayer({
                        id: 'IconLayer',
                        // mapboxApiAccessToken: 'pk.eyJ1IjoiYW5kZXJzb243MTY4IiwiYSI6ImNtMnczMmVnMDAybWIycHEzNzV2Yms4enMifQ.AinM6ZxkQD6k0iu_7cNSaA',
                        // mapStyle: 'mapbox://styles/mapbox/light-v9',
                        data: parsedData,
                        getColor: d => [255, 140, 0],
                        getIcon: d => 'marker',
                        getPosition: d => [d.Longitude, d.Latitude],
                        ///getPosition: d => d.geometry.coordinates[0],
                        getSize: 30,
                        iconAtlas: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/icon-atlas.png',
                        iconMapping: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/icon-atlas.json',
                        pickable: true
                    });

                    // Create a new DeckGL instance
                    let map2 = new DeckGL({
                        mapboxApiAccessToken: 'pk.eyJ1IjoiYW5kZXJzb243MTY4IiwiYSI6ImNtMnczMmVnMDAybWIycHEzNzV2Yms4enMifQ.AinM6ZxkQD6k0iu_7cNSaA',
                        mapStyle: 'mapbox://styles/mapbox/light-v9',
                        container: 'heat-map',
                        initialViewState: {
                            longitude: -80.24294547,
                            latitude: 43.16758482,
                            zoom: 12,
                            pitch: 60
                        },
                        controller: true,
                        layers: [layer]
                    });
                });


            /* ==== Event Listner for both maps ====*/
            document.getElementById('selectedMonth').addEventListener('input', function (event) {
                const month = event.target.value - 1;
                // Mapbox + Deck.gl
                fetch('/js/hello.geojson') // This fetches the file data from the backend
                    .then(response => response.json())
                    .then(geojsonData => {

                        // Colors for the quantile scale
                        const colors = [
                            [90, 24, 70],   // #5A1846 - Dark purple for low CO2
                            [144, 12, 63],  // #900C3F - Deep burgundy for medium-low CO2
                            [199, 0, 57],   // #C70039 - Red for medium CO2
                            [227, 97, 28],  // #E3611C - Orange-red for medium-high CO2
                            [241, 146, 14], // #F1920E - Orange for high CO2
                            [255, 195, 0]   // #FFC300 - Yellow for very high CO2
                        ];

                        // Initial map setup
                        const colorScale = (co2) => {
                            if (co2 >= 1000) return [255, 0, 0, 150];
                            else if (co2 >= 500) return [255, 165, 0, 150];
                            else if (co2 >= 400) return [255, 255, 0, 150];
                            else if (co2 >= 200) return [144, 238, 144, 150];
                            return [128, 128, 128, 150];
                        };

                        // Map Canada
                        const map = new DeckGL({
                            mapboxApiAccessToken: 'pk.eyJ1IjoiYW5kZXJzb243MTY4IiwiYSI6ImNtMnczMmVnMDAybWIycHEzNzV2Yms4enMifQ.AinM6ZxkQD6k0iu_7cNSaA',
                            mapStyle: 'mapbox://styles/mapbox/light-v9',
                            container: 'map',
                            initialViewState: {
                                longitude: -95.7129, //-95.7129,
                                latitude: 56.1304, //56.1304,
                                zoom: 1.8,
                                bearing: 0,
                                pitch: 0
                            },
                            controller: true,
                            layers: [
                                new GeoJsonLayer({
                                    id: 'geojsonData',
                                    data: geojsonData,
                                    filled: true,
                                    onDataLoad: () => setLoading(false),
                                    stroked: false,
                                    getPointRadius: 4,
                                    opacity: 0.5,
                                    pickable: true,
                                    autoHighlight: true,
                                    getFillColor: (d) => {
                                        const co2 = d.properties.co2[month];
                                        if (co2 < 418.47) {
                                            return [0, 128, 0, 150]; // Green
                                        } else if (co2 > 421.95) {
                                            return [255, 0, 0, 150]; // Red
                                        } else {
                                            return [255, 255, 0, 150]; // Yellow
                                        }    // Green for below 418.47
                                    },


                                    onClick: (info, event) => {

                                        console.log('Clicked on:', info.object.properties.prov_name_en);
                                        onProvinceClick(info.object.properties.prov_name_en[0]);
                                        updatePieChart(info.object.properties.prov_name_en[0]);

                                    }

                                }),

                                new TextLayer({
                                    id: 'text-layer',
                                    data: geojsonData.features,
                                    getPosition: d => [d.properties.geo_point_2d.lon, d.properties.geo_point_2d.lat],
                                    getText: d => d.properties.prov_name_en[0],
                                    getSize: 12,
                                    getColor: [0, 0, 0, 255],
                                    getAngle: 0,
                                    getTextAnchor: 'middle',
                                    getAlignmentBaseline: 'center',
                                    fontFamily: 'Arial, sans-serif'
                                })
                            ],

                        });


                    });

            });

        </script>

</body>

</html>